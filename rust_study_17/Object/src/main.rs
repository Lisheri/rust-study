/* 
    17. 面向对象编程特性
    关于 OOP 是什么有很多相互矛盾的定义；在一些定义下，Rust 是面向对象的；在其他定义下，Rust 不是。

    * Rust是面向对象编程语言吗?
    + Rust 受到多种编程范式的影响, 包括面向对象
    + 面向对象通常包含以下特征: 命名对象, 封装, 继承

    * 对象包含数据和行为:
    + 设计模式四人帮 在 《设计模式》中给面向对象的定义:
        - 面向对象的程序由对象组成
        - 对象包装了数据和操作这些数据的过程, 这些过程通常被称作方法或操作
    + 基于上面的定义, Rust是面向对象的
        - struct、 enum 是包含数据的
        - impl块为之提供了方法
        - 但是带有方法的struct、enum并没有被称为对象
    
    * 封装
    + 调用对象的外部代码无法访问对象内部的实现细节, 唯一可以与对象进行交互的方法就是通过它公开的API
    + Rust: pub 关键字 决定代码中哪些模块类型、函数、方法被公开, 默认都是私有的

    * 继承
    + 继承: 使对象可以沿用另外一个对象的数据和行为, 且无需重复定义相关代码
    + Rust: 没有继承(和go一样)
    + 使用继承的原因:
        - 代码复用
            - Rust: 默认trait方法来实现代码共享(trait 中如果某个方法有默认的实现, 就是方法的共享, 默认实现了这个trait的类型就会自动拥有这个方法)
            - 同时在实现trait时, 还可以选择对默认实现进行修改, 这样就和面向对象中的子类重写父类方法类似了
        - 多态(需要子类型能够被应用在一个需要父类的地方, 就是说如果一些对象拥有一些共同的特征, 那么这些对象就可以在运行时相互替换)
            - Rust: 泛型和trait约束(限定参数化多态 bounded parametric)
            - 在rust中使用泛型来对不同的可能类型进行抽象，并通过 trait bounds 对这些类型所必须提供的内容施加约束。这有时被称为 bounded parametric polymorphism, 也就是上面说的限定参数化多态
    + 很多新语言都不使用继承作为内置的程序设计方案了


    如lib.rs中
*/
fn main() {
    println!("Hello, world!");
}
